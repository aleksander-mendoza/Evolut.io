#ifndef PHYSICS_DESCRIPTORS_COMP
#define PHYSICS_DESCRIPTORS_COMP

#ifdef IS_AVAILABLE_BUFFER_PLAYER_EVENT
#define PLAYER_EVENT_NOTHING 0
#define PLAYER_EVENT_THROW 1
#define PLAYER_EVENT_SET_BLOCK 2
restrict layout (set = 0, binding = 0) uniform PlayerEvent{
    vec3 vec3_slot0;
    uint u32_slot0;
    vec3 vec3_slot1;
    uint u32_slot1;
    uvec3 uvec3_slot0;
    uint event_type;
}player_event;
#endif // IS_AVAILABLE_BUFFER_PLAYER_EVENT

#ifdef IS_AVAILABLE_BUFFER_CONSTANTS
#include "particle_constants.comp"
restrict layout (std430, set = 0, binding = 1) buffer ParticleConstant{
    ParticleConstants constants;
};
#endif

#ifdef IS_AVAILABLE_BUFFER_PARTICLES
#include "particle.comp"
restrict layout(std430, set = 0, binding = 2) buffer Particles{
    Particle particles[]; // the particles at indices from 0 (inclusive) to solid_particles (exclusive) are solid. All the remaining particles are phantom.
};
#endif // IS_AVAILABLE_BUFFER_PARTICLES

#ifdef IS_AVAILABLE_BUFFER_COLLISION_GRID
restrict layout(std430, set = 0, binding = 3) buffer CollisionGrid{
    uint collision_grid[];
};
#endif // IS_AVAILABLE_BUFFER_COLLISION_GRID

#ifdef IS_AVAILABLE_BUFFER_AUXILIARY_FLOATS
#ifdef IS_AVAILABLE_BUFFER_COLLISION_GRID
#error It is not allowed to use both IS_AVAILABLE_BUFFER_COLLISION_GRID and IS_AVAILABLE_BUFFER_AUXILIARY_FLOATS at the same time
#endif
restrict layout(std430, set = 0, binding = 3) buffer AuxiliaryFloats{
    float auxiliary_floats[];
};
#endif // IS_AVAILABLE_BUFFER_AUXILIARY_FLOATS

#ifdef IS_AVAILABLE_BUFFER_CONSTRAINTS
#include "constraint.comp"
restrict layout(std430, set = 0, binding = 4) buffer Constraints{
    Constraint constraints[];
};
#endif

#ifdef IS_AVAILABLE_BUFFER_INDIRECT
#include "indirect.comp"
restrict layout(std430, set = 0, binding = 5) buffer Indirect{
    DispatchIndirectCommand[5] dispatch_indirect;
    DrawIndirectCommand[3] draw_indirect;
};
#endif //IS_AVAILABLE_BUFFER_INDIRECT

#ifdef IS_AVAILABLE_BUFFER_BONES
#include "bone.comp"
restrict layout(std430, set = 0, binding = 6) buffer Bones{
    Bone bones[];
};
#endif


#ifdef IS_AVAILABLE_BUFFER_WORLD
restrict layout(std430, set = 0, binding = 7) buffer World{
    uint world[];
};
#endif

#ifdef IS_AVAILABLE_BUFFER_FACES
#include "face.comp"
restrict layout(std430, set = 0, binding = 8) buffer Faces{
    // The first few faces are in fact, not faces at all!
    // Instead the faces at possitons 0..total_chunks are used to store the number of faces in eahc chunk.
    // For example faces[0].x stores the number of faces in first chunk, faces[1].x is second chunk and so on.
    // The chunks are indexed according to chunk_pos_into_chunk_idx().
    // Opaque faces need to be rendered first, before the transparent faces! For this reason the faces[] is split into
    // two regions, first for opaque, second for transparent. The faces at indices total_chunks..2*total_chunks store
    // the number of transparent faces at each chunk. So faces[0].x is the number of opaque faces in first chunk, while
    // faces[total_chunks].x is the number of transparent faces in first chunk. The very first actual face can be found at index
    // faces[2*total_chunks].
    // Notice that every face holds two numbers: coords and tex_idx. The faces at indices 0..2*total_chunks store the
    // number of faces in first component but  do not make
    // any use of the second component. Its value is undefined. However! Some algorithms do make use of the y component,
    // as a temporary storage purely for the purpose of some computations.
    Face faces[];
};
#endif //IS_AVAILABLE_BUFFER_FACES

#ifdef IS_AVAILABLE_BUFFER_BLOCK_PROPS
#include "block.comp"
restrict layout(std430, set = 0, binding = 9) buffer BlockProps{
    BlockProp block_props[];
};
#endif // IS_AVAILABLE_BUFFER_BLOCK_PROPS


#ifdef IS_AVAILABLE_BUFFER_SENSORS
#include "sensor.comp"
restrict layout(std430, set = 0, binding = 10) buffer Sensors{
    Sensor sensors[];
};
#endif

#ifdef IS_AVAILABLE_BUFFER_PERSISTENT_FLOATS
restrict layout(std430, set = 0, binding = 11) buffer PersistentFloats{
    float persistent_floats[];
};
#endif

#ifdef IS_AVAILABLE_BUFFER_NEURAL_NET_LAYERS
#include "neural_net_layer.comp"
restrict layout(std430, set = 0, binding = 12) buffer NeuralNetLayers{
    NeuralNetLayer neural_net_layers[];
};
#endif


#ifdef IS_AVAILABLE_BUFFER_MUSCLES
#include "muscle.comp"
restrict layout(std430, set = 0, binding = 13) buffer Muscles{
     Muscle muscles[];
};
#endif


#endif //PHYSICS_DESCRIPTORS_COMP