#ifndef GRID_COMP
#define GRID_COMP
#include "constants.comp"
int cell_position_to_idx(ivec3 cell_position){
    return cell_position.x+(cell_position.y+cell_position.z*CHUNK_HEIGHT_IN_CELLS)*CHUNK_WIDTH_IN_CELLS;
}
uvec3 broad_phase_position_to_cell_pos(vec3 position){
    return uvec3(position/(BROAD_PHASE_CELL_SIZE));
}
uint broad_phase_cell_pos_to_cell_idx(const ParticleConstants c,uvec3 cell_position){
    return cell_position.x+(cell_position.y+cell_position.z*BROAD_PHASE_CHUNK_HEIGHT_IN_CELLS)*c.chunks_x*BROAD_PHASE_CHUNK_WIDTH_IN_CELLS;
}
uint broad_phase_position_to_cell_idx(const ParticleConstants c,vec3 position){
    return broad_phase_cell_pos_to_cell_idx(c,broad_phase_position_to_cell_pos(position));
}
#ifdef IS_AVAILABLE_BUFFER_COLLISION_GRID
uint broad_phase_cell_len(uint broad_phase_cell_idx){
    uint collision_grid_offset = (BROAD_PHASE_CELL_CAPACITY+1)*broad_phase_cell_idx;
    return collision_grid[collision_grid_offset];
}
uint broad_phase_cell_elem(uint broad_phase_cell_idx, uint element_idx){
    uint collision_grid_offset = (BROAD_PHASE_CELL_CAPACITY+1)*broad_phase_cell_idx;
    return collision_grid[collision_grid_offset+1+element_idx];
}
#endif

#endif // GRID_COMP