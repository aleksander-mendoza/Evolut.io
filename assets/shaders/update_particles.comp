#version 450
//#extension GL_EXT_debug_printf : enable
#define IS_AVAILABLE_BUFFER_CONSTANTS
#define IS_AVAILABLE_BUFFER_CONSTRAINTS
#define IS_AVAILABLE_BUFFER_WORLD
#define IS_AVAILABLE_BUFFER_PARTICLES
#define IS_AVAILABLE_BUFFER_PLAYER_EVENT
#define IS_AVAILABLE_BUFFER_COLLISION_GRID
#define IS_AVAILABLE_BUFFER_INDIRECT
#define IS_AVAILABLE_BUFFER_FACES
#define IS_AVAILABLE_BUFFER_BONES
#define IS_AVAILABLE_BUFFER_BLOCK_PROPS
layout (local_size_x = 32) in;

#include "physics_descriptors.comp"
#include "constants.comp"
#include "grid.comp"
#include "constants.comp"
#include "world.comp"
#include "util.comp"
#include "ray_cast.comp"
#include "update_faces.comp"

void main()
{


    /*
    if (gID < c.particles){
        const Particle p = particles[gID];
        if(p.energy > 0){
            uvec3 block_position = uvec3(p.position);
            uint block = world[block_pos_into_world_idx(c, block_position)];
            float block_mass = block_props[block].mass;
            uvec3 cell_position = block_position/BROAD_PHASE_CELL_SIZE;
            uint cell_idx = broad_phase_cell_pos_to_cell_idx(cell_position);
            uint cell_len = broad_phase_cell_len(cell_idx);
            float penetrated_bone_mass = 0;
            for (int i=0;i<cell_len;i++){
                uint bone_idx = broad_phase_cell_elem(cell_idx, i);
                const Bone bone = bones[bone_idx];
                vec3 half_hitbox = vec3(bone.half_side_length, bone.half_height, bone.half_side_length);
                if (all(lessThan(abs(p.position - bone.new_center), half_hitbox))){
                    penetrated_bone_mass = bone.mass;
                    break;
                }
            }
            float new_energy = p.energy - block_mass - penetrated_bone_mass;
//            if(any(lessThan(p.energy,vec3(0,0,0)))){
//                int top_of_stack = atomicAdd(constants.particle_stack, -1);
//                if(top_of_stack>=0){
//                    p = particles[top_of_stack];
//                }
//            }
            particles[gID].energy = new_energy;
            particles[gID].position = p.position + p.velocity;
        }
    }
    */
}


