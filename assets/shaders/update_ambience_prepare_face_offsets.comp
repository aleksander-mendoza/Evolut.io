#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#define IS_AVAILABLE_BUFFER_TMP_FACES_COPY
#define IS_AVAILABLE_BUFFER_FACES_TO_BE_REMOVED
#define IS_AVAILABLE_BUFFER_FACES_TO_BE_INSERTED
#define IS_AVAILABLE_BUFFER_FACES

#include "descriptors_ambience.comp"
layout (local_size_x_id = GROUP_SIZE_CONST_ID) in;
#include "utils.comp"

shared uvec2 face_offset_per_chunk[TOTAL_CHUNKS*4];

void main() {

    const uint lID = gl_LocalInvocationID.x;
    if(lID==0){
        face_offset_per_chunk[0] = uvec2(0,0);//the offset to faces of the first chunk is faces[c.total_chunks*2]. Here, however, we don't count those few leading faces and instead we use 0 as the initial offset
    }
    for (uint chunk_offset=lID;chunk_offset < TOTAL_CHUNKS*2;chunk_offset+=GROUP_SIZE){
        uint inserted_count = get_inserted_face_count(chunk_offset);
        uint removed_count = get_removed_face_count(chunk_offset);
        uint original_face_count = get_chunk_face_count_at(chunk_offset);
        face_offset_per_chunk[chunk_offset+1] = uvec2(original_face_count + inserted_count - removed_count, original_face_count);
        //face_counts_per_chunk[0].x contains the offset to the beginning of first chunk
        //face_counts_per_chunk[1].x contains the offset to the beginning of second chunk (and ending of first one)
        //...and so on...
        //
    }
    uint offset = 0;
    for(int shift=1;shift<=TOTAL_CHUNKS*2;shift*=2){
        for (uint i=lID;i+shift <= TOTAL_CHUNKS*2;i+=GROUP_SIZE){
            face_offset_per_chunk[TOTAL_CHUNKS*2 + i+shift] = face_offset_per_chunk[i] + face_offset_per_chunk[i+shift];
        }
        shift*=2;
        if(shift>TOTAL_CHUNKS*2){
            offset = TOTAL_CHUNKS*2;
            break;
        }
        for (uint i=lID;i+shift <= TOTAL_CHUNKS*2;i+=GROUP_SIZE){
            face_offset_per_chunk[i+shift] = face_offset_per_chunk[TOTAL_CHUNKS*2 + i] + face_offset_per_chunk[TOTAL_CHUNKS*2 + i+shift];
        }
    }
    for (uint chunk_offset=lID;chunk_offset <= TOTAL_CHUNKS*2;chunk_offset+=GROUP_SIZE){
        //now face_counts_per_chunk[offset + chunk_offset] holds information about total number of faces in all chunks from 0 up to chunk_offset (inclusive).
        set_faces_beginning_offset(chunk_offset, face_offset_per_chunk[offset + chunk_offset]);
    }
}
