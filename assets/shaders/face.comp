#ifndef FACE_COMP
#define FACE_COMP

#include "constants.comp"
#include "world.comp"

#define Face uvec2

#define XPlus 0
#define XMinus 1
#define YPlus 2
#define YMinus 3
#define ZPlus 4
#define ZMinus 5

uint orientation_for_dim_and_dir(uint dimension, bool minus_direction) {
    return dimension*2+uint(minus_direction);
}
uint block_pos_relative_to_chunk_and_orientation_into_face_coords(uvec4 position_relative_to_chunk_and_orientation) {
    return ((
    position_relative_to_chunk_and_orientation.w*256+
    position_relative_to_chunk_and_orientation.z)*256+
    position_relative_to_chunk_and_orientation.y)*256+
    position_relative_to_chunk_and_orientation.x;
}

uvec4 face_coords_into_block_pos_relative_to_chunk_and_orientation(uint face_coords) {
    uint x = face_coords & 255u;
    uint y = face_coords/256 & 255u;
    uint z = face_coords/(256*256) & 255u;
    uint w = face_coords/(256*256*256) & 255u;
    return uvec4(x,y,z,w);
}

bool face_coords_have_the_same_pos(uint face_coords1, uint face_coords2) {
    return (face_coords1 | 0xFF000000u) == (face_coords2 | 0xFF000000u);
}

uint pack_chunk_pos_and_tex_id(uint chunk_x, uint chunk_z, uint texture_id) {
    return texture_id*256*256+(chunk_x + chunk_z*256);
}

Face new_face(uvec3 block_position_relative_to_chunk, uint orientation, uint chunk_x, uint chunk_z, uint texture_id){
    uint face_coords = block_pos_relative_to_chunk_and_orientation_into_face_coords(uvec4(block_position_relative_to_chunk,orientation));
    uint tex_id = pack_chunk_pos_and_tex_id(chunk_x, chunk_z, texture_id);
    return uvec2(face_coords,tex_id);
}

//uvec3 unpack_chunk_pos_and_tex_id(uint packed){
//    return (chunk_x*256 + chunk_z)*256*256+texture_id;
//}
#endif // FACE_COMP