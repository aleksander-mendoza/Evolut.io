#ifndef PHYSICS_DESCRIPTORS_COMP
#define PHYSICS_DESCRIPTORS_COMP

#ifdef IS_AVAILABLE_BUFFER_PLAYER_EVENT
#include "player_event.comp"
restrict layout (set = 0, binding = 0) uniform PlayerEvents{
    PlayerEvent player_event;
};
#endif // IS_AVAILABLE_BUFFER_PLAYER_EVENT

#ifdef IS_AVAILABLE_BUFFER_CONSTANTS
#include "particle_constants.comp"
restrict layout (std430, set = 0, binding = 1) buffer ParticleConstant{
    ParticleConstants constants;
};
#endif


#ifdef IS_AVAILABLE_BUFFER_INDIRECT
#include "indirect.comp"
restrict layout(std430, set = 0, binding = 2) buffer Indirect{
    DispatchIndirectCommand[DISPATCH_INDIRECT_LEN] dispatch_indirect;
    DrawIndirectCommand[DRAW_INDIRECT_LEN] draw_indirect;
};
#endif //IS_AVAILABLE_BUFFER_INDIRECT

#ifdef IS_AVAILABLE_BUFFER_WORLD
restrict layout(std430, set = 0, binding = 3) buffer World{
    uint world[];
};
#endif

#ifdef IS_AVAILABLE_BUFFER_FACES
#include "face.comp"
restrict layout(std430, set = 0, binding = 4) buffer Faces{
    Face faces[];
};
#endif //IS_AVAILABLE_BUFFER_FACES

//#ifdef IS_AVAILABLE_BUFFER_BLOCK_PROPS
//#include "block.comp"
//restrict layout(std430, set = 0, binding = 5) buffer BlockProps{
//    BlockProp block_props[];
//};
//#endif // IS_AVAILABLE_BUFFER_BLOCK_PROPS


#ifdef IS_AVAILABLE_BUFFER_WORLD_BLOCKS_TO_UPDATE
#include "block.comp"
restrict layout(std430, set = 0, binding = 5) buffer WorldBlocksToUpdate{
    uint world_blocks_to_update[];
};
#endif // IS_AVAILABLE_BUFFER_WORLD_BLOCKS_TO_UPDATE

#ifdef IS_AVAILABLE_BUFFER_BLOCKS_TO_BE_INSERTED_OR_REMOVED
restrict layout(std430, set = 0, binding = 6) buffer BlocksToBeInsertedOrRemoved{
    uint blocks_to_be_inserted_or_removed[];
};
#endif // IS_AVAILABLE_BUFFER_BLOCKS_TO_BE_INSERTED_OR_REMOVED


#ifdef IS_AVAILABLE_BUFFER_FACES_TO_BE_INSERTED
#define FACES_TO_BE_INSERTED_CHUNK_CAPACITY 64 //TODO: use specialization constants instead of such macros
restrict layout(std430, set = 0, binding = 7) buffer FacesToBeInserted{
    Face faces_to_be_inserted[];
};
#endif // IS_AVAILABLE_BUFFER_FACES_TO_BE_INSERTED

#ifdef IS_AVAILABLE_BUFFER_FACES_TO_BE_REMOVED
#define FACES_TO_BE_REMOVED_CHUNK_CAPACITY 64 //TODO: use specialization constants instead of such macros
restrict layout(std430, set = 0, binding = 8) buffer FacesToBeRemoved{
    uint faces_to_be_removed[];
};
#endif // IS_AVAILABLE_BUFFER_FACES_TO_BE_REMOVED

#ifdef IS_AVAILABLE_BUFFER_TMP_FACES_COPY
//#include "face.comp"
restrict layout(std430, set = 0, binding = 9) buffer TmpFacesCopy{
    uint tmp_faces_copy[];
};
#endif // IS_AVAILABLE_BUFFER_TMP_FACES_COPY

#ifdef IS_AVAILABLE_BUFFER_WORLD_BLOCKS_TO_UPDATE_COPY
#include "block.comp"
restrict layout(std430, set = 0, binding = 10) buffer WorldBlocksToUpdateCopy{
    uint world_blocks_to_update_copy[];
};
#endif // IS_AVAILABLE_BUFFER_WORLD_BLOCKS_TO_UPDATE_COPY

#ifdef IS_AVAILABLE_BUFFER_WORLD_COPY
#include "block.comp"
restrict layout(std430, set = 0, binding = 11) buffer WorldCopy{
    uint world_copy[];
};
#endif // IS_AVAILABLE_BUFFER_WORLD_COPY


#endif //PHYSICS_DESCRIPTORS_COMP