#ifndef WORLD_COMP
#define WORLD_COMP
#include "constants.comp"
#include "particle_constants.comp"

uint chunk_pos_into_chunk_idx(const ParticleConstants c, uint x, uint z) {
    return z * c.chunks_x + x;
}
uint block_pos_into_chunk_idx(const ParticleConstants c, uint x,uint z){
    return chunk_pos_into_chunk_idx(c, x / CHUNK_WIDTH, z / CHUNK_DEPTH);
}
uint block_pos_into_world_idx(const ParticleConstants c, uvec3 pos){
    return pos.z * c.world_width + pos.x + pos.y * c.world_area;
}
uvec3 world_idx_into_block_pos(const ParticleConstants c, uint idx){
    uint y = idx / c.world_area;
    uint y_rem = idx - y*c.world_area;
    uint z = y_rem / c.world_width;
    uint x = y_rem - z * c.world_width;
    return uvec3(x,y,z);
}
uint block_pos_relative_to_chunk_into_block_idx_relative_to_chunk(uvec3 position_relative_to_chunk) {
    //Notice that this conversion could equivalently be expressed as
    // position_relative_to_chunk.x + position_relative_to_chunk.z << 4 + position_relative_to_chunk.y << 8
    return position_relative_to_chunk.x+(position_relative_to_chunk.y*CHUNK_DEPTH+position_relative_to_chunk.z)*CHUNK_WIDTH;
}

//uvec3 block_idx_relative_to_chunk_into_block_pos_relative_to_chunk(uint index_relative_to_chunk) {
//    return position_relative_to_chunk.x+(position_relative_to_chunk.y*CHUNK_DEPTH+position_relative_to_chunk.z)*CHUNK_WIDTH;
//}


#endif // WORLD_COMP