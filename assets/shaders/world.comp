#ifndef WORLD_COMP
#define WORLD_COMP
#include "constants.comp"

uint chunk_pos_into_chunk_idx(uint chunks_x, uint x, uint z) {
    return z * chunks_x + x;
}
uint block_pos_into_chunk_idx(uint chunks_x, uint x,uint z){
    return chunk_pos_into_chunk_idx(chunks_x, x / CHUNK_WIDTH, z / CHUNK_DEPTH);
}
uint block_pos_into_world_idx(uint world_width,uint world_area, uvec3 pos){
    return pos.z * world_width + pos.x + pos.y * world_area;
}
uint block_pos_relative_to_chunk_into_block_idx_relative_to_chunk(uvec3 position_relative_to_chunk) {
    //Notice that this conversion could equivalently be expressed as
    // position_relative_to_chunk.x + position_relative_to_chunk.z << 4 + position_relative_to_chunk.y << 8
    return position_relative_to_chunk.x+(position_relative_to_chunk.y*CHUNK_DEPTH+position_relative_to_chunk.z)*CHUNK_WIDTH;
}
//uvec3 block_idx_relative_to_chunk_into_block_pos_relative_to_chunk(uint index_relative_to_chunk) {
//    return position_relative_to_chunk.x+(position_relative_to_chunk.y*CHUNK_DEPTH+position_relative_to_chunk.z)*CHUNK_WIDTH;
//}
//uvec3 world_idx_into_block_pos(uint world_width,uint world_area, uint idx) {
//    uint z = idx / world_area;
//    uint z_rem = idx - z * world_area; // == idx % world_area
//    uint x = z_rem / world_width;
//    uint x_rem = z_rem - x * world_width; // == idx % world_width
//    return uvec3(x, x_rem, z);
//}

#endif // WORLD_COMP